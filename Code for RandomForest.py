# -*- coding: utf-8 -*-
"""database02_rfr_not_normalized.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RGSj5FGczBBH1ik4gwRnWLIbhG0he1Qi
"""

'''
Not normalized
Random Forest Regressor
Scaled by StandarScaler
https://stackabuse.com/random-forest-algorithm-with-python-and-scikit-learn/
'''
#Imports
from sklearn.datasets import make_regression
from keras import metrics
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor

#Importing data
data = pd.read_csv('database_02.csv')

#Setting data // x and y
X = data.iloc[:, 0:11].values
y = data.iloc[:, 11:16].values

#Train, test and validation // Splitting validation from x_test and y_test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20,
                                                    random_state = 0)

#Model Structure
model = RandomForestRegressor(n_estimators = 35, random_state = 0)
model.fit(X_train, y_train)
score = model.score(X_train, y_train)
print("Training score:", score)

#Predicting and visualizing the data
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f'This is r2: {r2}')

#Metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)).mean())

#Plotting void ratio
plt.scatter(y_pred[:, 4], y_pred[:, 4], c ='green', s = 1, alpha = 1)
plt.scatter(y_test[:, 4], y_test[:, 4], c ='black', s = 1, alpha = 0.5)
plt.xlabel('void ratio predicted')
plt.ylabel('void ratio observed')
plt.title('Final predicted void ratio')
plt.legend(['y_pred', 'y_observed'], loc='upper left')
plt.show()

